generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLOYEE
  ACCOUNTANT
  OUTSOURCE
}

model User {
  id         String @id
  handle     String @unique
  email      String @unique
  role       Role   @map("role")
  lastName   String @map("last_name")
  firstName  String @map("first_name")
  middleName String @map("middle_name")
  password   String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  reciepts  Reciept[]
  reports   Report[]
  Ticket    Ticket[]

  @@map("users")
}

model Report {
  id        String  @id
  fileName  String  @map("file_name")
  validated Boolean @default(false)

  addedBy   User   @relation(fields: [addedById], references: [id])
  addedById String @map("added_by_id")

  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?    @map("updated_at")
  reportItems ReportItem[]
  ticket      Ticket?

  @@map("reports")
}

model ReportItem {
  id Int @id @default(autoincrement())

  approved Boolean @default(false)

  accountNumber       String   @map("account_number")
  txId                String   @map("tx_id")
  operationType       String   @map("operation_type")
  category            String
  status              String
  authDate            DateTime @map("auth_date")
  txDate              DateTime @map("tx_date")
  currency            Int
  sum                 Decimal
  counterparty        String
  counterpartyINN     String   @map("counterparty_inn")
  counterpartyKPP     String   @map("counterparty_kpp")
  counterpartyAccount String   @map("counterparty_account")
  counterpartyBik     String   @map("counterparty_bik")
  corrAccount         String   @map("corr_account")
  purpose             String
  cardNo              String   @map("card_no")
  MCC                 String   @map("mcc")
  country             String
  city                String

  report   Report @relation(fields: [reportId], references: [id])
  reportId String

  @@map("report_items")
}

model RecieptCategory {
  id       Int     @id @default(autoincrement())
  name     String
  maxPrice Decimal @map("max_price")

  reciepts Reciept[]

  @@map("reciept_categories")
}

model Reciept {
  id         String          @id
  userId     String          @map("user_id")
  imageName  String          @map("image_name")
  fn         BigInt
  fp         BigInt
  amount     Decimal
  purpose    String
  paidAt     DateTime        @map("paid_at")
  
  category   RecieptCategory? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  user          User            @relation(fields: [userId], references: [id])
  TicketReciept TicketReciept[]

  @@map("reciepts")
}

enum TicketStatus {
  PENDING
  OK
  FAILED
}

model Ticket {
  id        String       @id
  userId    String       @map("user_id")
  startDate DateTime     @map("start_date")
  endDate   DateTime     @map("end_date")
  status    TicketStatus @default(PENDING)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime?    @map("updated_at")

  report        Report?         @relation(fields: [reportId], references: [id])
  reportId      String?         @unique
  TicketReciept TicketReciept[]

  user User @relation(fields: [userId], references: [id])

  @@map("tickets")
}

model TicketReciept {
  ticketId  String  @map("ticket_id")
  recieptId String  @map("reciept_id")
  reason    String?

  ticket  Ticket  @relation(fields: [ticketId], references: [id])
  reciept Reciept @relation(fields: [recieptId], references: [id])

  @@id([ticketId, recieptId])
  @@map("ticket_reciepts")
}
